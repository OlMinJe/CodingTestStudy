/** ✏️ 목표
 * - 모든 명함을 넣을 수 있는 가장 작은 명함 케이스의 크기 찾기
 *
 * ► 예상 로직 1
 * 1. 가로, 세로 값 찾기
 * 가로는 돌려서 세로로, 세로는 돌려서 가로로 만들 수 있으므로
 * 둘(가로,세로) 중 큰 값을 가로로, 작은 값을 세로로 저장한다.
 * 2. 모든 명함을 넣는 가장 작은 명함 케이스 크기 찾기
 * 가로는 큰 값들을, 세로는 작은 값들을 넣었다.
 * 이 중 각각의 가장 큰 값을 찾아 곱하면 모든 명함을 넣는 가장 작은 명함 케이스 크기가 된다.
 */

function solution(sizes) {
  const w = sizes.map(x => Math.max(x[0],x[1]));
  const h = sizes.map(x => Math.min(x[1],x[0]));

  return Math.max(...w) * Math.max(...h);
}

/**
 * 📖 풀이 과정 설명
 * 1️⃣ 가로, 세로 중 큰값과 작은 값 비교하여 저장
 * - map 함수를 통해 가장 큰 값을 가로로 저장한다.
 * ex) `[[60, 50], [30, 70], [60, 30], [80, 40]]`에서 `[60,50]`을 비교하면
 * ex) 60이 더 크므로 가로로, 50이 더 작으므로 세로로 저장한다.
 * ex) `Math.max(x[0],x[1])` 나는 가로를 큰것으로 정해 다음과 같이 저장하였다.
 * ex) `Math.min(x[1],x[0])` 세로를 작은 것으로 정해 다음과 같이 저장하였다.
 * 2️⃣ 각각의 큰 값을 곱해 명함 케이스 크기 찾기
 * `Math.max(...w) * Math.max(...h)` Math.max와 spread 함수를 통해 w,h 중 가장 큰 값을 각각 찾아 곱한다.
 */